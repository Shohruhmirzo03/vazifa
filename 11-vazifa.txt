from database import db


def add_category():
    category = input("Kategoriyani kiriting: ")
    db.insert_category(category)
    yes_no = input("Yana kategoriya qo'shasizmi?: ha/yoq: ")
    if yes_no == 'ha':
        add_category()


def view_categories():
    categories = db.view_all_categories()
    for category in categories:
        category_id, category_name = category
        print('|', str(category_id).center(5, ' '), '|', category_name.center(50, ' '), '|')


def delete_category():
    view_categories()
    category_id = int(input("Kategoriya id sini kiriting: "))
    db.delete_category_by_id(category_id)
    yes_no = input("Yana kategoriya o'chirasizmi?: ha/yoq: ")
    if yes_no == 'ha':
        delete_category()


def update_category():
    view_categories()
    category_id = int(input("Kategoriya id sini kiriting: "))
    # category = input("Kategoriyaning yangi nomini kiriting: ")
    db.update_category_by_id(category_id)
    yes_no = input("Yana kategoriyani o'zgartirasizmi?: ha/yoq: ")
    if yes_no == 'ha':
        update_category()


def run():
    while True:
        command = input("Buyruqni kiriting: ")
        if command == 'stop':
            break
        elif command == 'add category':
            add_category()
        elif command == 'del category':
            delete_category()
        elif command == 'view categories':
            view_categories()
        elif command == 'update category':
            update_category()





if __name__ == '__main__':
    db.create_table_categories()
    db.create_table_articles()
    db.drop_table_articles()
    run()
------------------------------------------------------------------------------------------------------------------------------------------------


import psycopg2


class DataBase:
    def __init__(self):
        self.database = psycopg2.connect(
            database='kun_uz',
            user='postgres',
            password='123456',
            host='localhost'
        )

    def manager(self, sql, *args,
                fetchone: bool = False,
                fetchall: bool = False,
                fetchmany: bool = False,
                commit: bool = False):
        with self.database as db:
            with db.cursor() as cursor:
                cursor.execute(sql, args)
                if commit:
                    result = db.commit()
                elif fetchone:
                    result = cursor.fetchone()
                elif fetchall:
                    result = cursor.fetchall()
                elif fetchmany:
                    result = cursor.fetchmany()
            return result

    def create_table_categories(self):
        sql = '''CREATE TABLE IF NOT EXISTS categories(
            category_id INTEGER GENERATED ALWAYS AS IDENTITY PRiMARY KEY,
            category_name VARCHAR(50) UNIQUE NOT NULL
        )'''
        self.manager(sql, commit=True)

    def drop_table_articles(self):
        sql = '''DROP table articles'''
        self.manager(sql, commit=True)

    def insert_category(self, category):
        sql = '''INSERT INTO categories(category_name) VALUES (%s) ON CONFLICT DO NOTHING'''
        self.manager(sql, (category,), commit=True)

    def delete_category_by_id(self, category_id):
        sql = '''DELETE FROM categories WHERE category_id = %s'''
        self.manager(sql, (category_id,), commit=True)

    def update_category_by_id(self, category_id):
        sql = '''UPDATE categories SET category_name = %s WHERE category_id = %s'''
        self.manager(sql, ('test', category_id), commit=True)

    def view_all_categories(self):
        sql = '''SELECT * FROM categories'''
        return self.manager(sql, fetchall=True)

    def create_table_articles(self):
        sql = '''CREATE TABLE IF NOT EXISTS articles(
            article_id INTEGER GENERATED ALWAYS AS IDENTITY PRiMARY KEY,
            title VARCHAR(250),
            content TEXT,
            created TIMESTAMP DEFAULT NOW(),
            views INTEGER
        )'''
        self.manager(sql, commit=True)


db = DataBase()